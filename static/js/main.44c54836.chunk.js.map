{"version":3,"sources":["config.js","ProgrammingWheel.js","App.js","serviceWorker.js","index.js"],"names":["config","endpoint","upload","ProgrammingWheel","data","this","props","react_default","a","createElement","JSON","stringify","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","event","setState","selectedFile","target","files","loaded","onClickHandler","FormData","append","state","axios","post","then","res","console","log","statusText","result","catch","error","drums","kick","snare","hihat","cymbal","bass","E","A","D","midi","name","time","G","vibraphone","bars","type","onChange","onClick","href","ProgrammingWheel_ProgrammingWheel","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wIAAWA,uFASTA,EAAS,CACPC,SAAU,CACRC,OAAQ,qECTOC,mLACV,IACCC,EAASC,KAAKC,MAAdF,KACR,OAAOG,EAAAC,EAAAC,cAAA,WAAMC,KAAKC,UAAUP,EAAM,KAAM,WAHEQ,aCGzBC,cACnB,SAAAA,EAAYP,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAV,KAAAQ,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAd,KAAMC,KA8DRc,gBAAkB,SAAAC,GAChBP,EAAKQ,SAAS,CACZC,aAAcF,EAAMG,OAAOC,MAAM,GACjCC,OAAQ,KAlEOZ,EAsEnBa,eAAiB,WACf,IAAMvB,EAAO,IAAIwB,SACjBxB,EAAKyB,OAAO,OAAQf,EAAKgB,MAAMP,cAC/BQ,IACGC,KAAKhC,EAAOC,SAASC,OAAQE,GAC7B6B,KAAK,SAAAC,GAEJC,QAAQC,IAAIF,EAAIG,YAChBvB,EAAKQ,SAAS,CAAEgB,OAAQJ,EAAI9B,SAE7BmC,MAAM,SAAAC,GACLL,QAAQK,MAAMA,MA/ElB1B,EAAKgB,MAAQ,CACXP,aAAc,KACde,OAAQ,CACNG,MAAO,CACLC,KAAM,CAAC,GAAI,IACXC,MAAO,CAAC,GAAI,IACZC,MAAO,CAAC,GAAI,IACZC,OAAQ,CAAC,GAAI,KAEfC,KAAM,CACJC,EAAG,CAAC,GAAI,IACRC,EAAG,CAAC,GAAI,IACRC,EAAG,CACD,CACE,CACEC,KAAM,GACNC,KAAM,MACNC,KAAM,GAER,CACEF,KAAM,GACNC,KAAM,MACNC,KAAM,IAER,CACEF,KAAM,GACNC,KAAM,MACNC,KAAM,MAGV,CACE,CACEF,KAAM,GACNC,KAAM,MACNC,KAAM,GAER,CACEF,KAAM,GACNC,KAAM,MACNC,KAAM,KAER,CACEF,KAAM,GACNC,KAAM,MACNC,KAAM,GAER,CACEF,KAAM,GACNC,KAAM,MACNC,KAAM,KAIZC,EAAG,CAAC,GAAI,KAEVC,WAAY,CACVC,KAAM,CAAC,GAAI,OA1DAzC,wEAsFjB,OACEP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SAAO+C,KAAK,OAAOL,KAAK,OAAOM,SAAUpD,KAAKe,kBAC9Cb,EAAAC,EAAAC,cAAA,UAAQ+C,KAAK,SAASE,QAASrD,KAAKsB,gBAApC,WAIFpB,EAAAC,EAAAC,cAAA,KAAGkD,KAA+B,gBAAlC,qBAEApD,EAAAC,EAAAC,cAACmD,EAAD,CAAkBxD,KAAMC,KAAKyB,MAAMQ,iBAjGV1B,aCObiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.44c54836.chunk.js","sourcesContent":["export let config;\n\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n  config = {\n    endpoint: {\n      upload: 'http://localhost:8080'\n    }\n  };\n} else {\n  config = {\n    endpoint: {\n      upload: 'https://us-central1-mmx-programmer.cloudfunctions.net/upload'\n    }\n  };\n}\n","import React, { Component } from 'react';\n\nexport default class ProgrammingWheel extends Component {\n  render() {\n    const { data } = this.props;\n    return <pre>{JSON.stringify(data, null, 2)}</pre>;\n  }\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { config } from './config';\nimport ProgrammingWheel from './ProgrammingWheel';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedFile: null,\n      result: {\n        drums: {\n          kick: [[], []],\n          snare: [[], []],\n          hihat: [[], []],\n          cymbal: [[], []]\n        },\n        bass: {\n          E: [[], []],\n          A: [[], []],\n          D: [\n            [\n              {\n                midi: 68,\n                name: 'G#4',\n                time: 0\n              },\n              {\n                midi: 68,\n                name: 'G#4',\n                time: 0.5\n              },\n              {\n                midi: 68,\n                name: 'G#4',\n                time: 2.5\n              }\n            ],\n            [\n              {\n                midi: 68,\n                name: 'G#4',\n                time: 1\n              },\n              {\n                midi: 68,\n                name: 'G#4',\n                time: 1.5\n              },\n              {\n                midi: 68,\n                name: 'G#4',\n                time: 2\n              },\n              {\n                midi: 68,\n                name: 'G#4',\n                time: 3\n              }\n            ]\n          ],\n          G: [[], []]\n        },\n        vibraphone: {\n          bars: [[], []]\n        }\n      }\n    };\n  }\n  onChangeHandler = event => {\n    this.setState({\n      selectedFile: event.target.files[0],\n      loaded: 0\n    });\n  };\n\n  onClickHandler = () => {\n    const data = new FormData();\n    data.append('file', this.state.selectedFile);\n    axios\n      .post(config.endpoint.upload, data)\n      .then(res => {\n        // then print response status\n        console.log(res.statusText);\n        this.setState({ result: res.data });\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <form>\n          <input type=\"file\" name=\"file\" onChange={this.onChangeHandler} />\n          <button type=\"button\" onClick={this.onClickHandler}>\n            Upload\n          </button>\n        </form>\n        <a href={process.env.PUBLIC_URL + '/example.mid'}>Example midi file</a>\n        {/* <pre>{JSON.stringify(this.state.result, null, 2)}</pre> */}\n        <ProgrammingWheel data={this.state.result} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}